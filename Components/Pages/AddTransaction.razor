@page "/addtransaction"
@using Newtonsoft.Json
@using System.IO
@using Trackit.Components.Pages
@inject IJSRuntime JS

<h3>Add Transaction</h3>

<div class="form-container">
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label for="transactionType">Transaction Type</label><br />

            
            <select @bind="transaction.TransactionType">
                @foreach (var type in Enum.GetValues(typeof(TransactionType)).Cast<TransactionType>())
                {
                    <option value="@type">@type.ToString()</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" id="title" name="title" @bind="transaction.Title" placeholder="Enter Title" />
        </div>

        <div class="form-group">
            <label for="amount">Amount</label>
            <input type="number" id="amount" name="amount" @bind="transaction.Amount" placeholder="Enter Amount" />
        </div>

        <div class="form-group">
            <label for="tags">Tags</label>
            <select @bind="transaction.Tags">
                <option value="Yearly">Yearly</option>
                <option value="Monthly">Monthly</option>
                <option value="Food">Food</option>
                <option value="Drinks">Drinks</option>
                <option value="Clothes">Clothes</option>
                <option value="Gadgets">Gadgets</option>
                <option value="Miscellaneous">Miscellaneous</option>
                <option value="Fuel">Fuel</option>
                <option value="Rent">Rent</option>
                <option value="EMI">EMI</option>
                <option value="Market">ShareMarket</option>
                <option value="Party">Party</option>
                <option value="Fee">Fee</option>
                <option value="Pocket Money">Pocket Money</option>
            </select>
        </div>

        <div class="form-group">
            <label for="date">Date</label>
            <input type="date" id="date" name="date" @bind="transaction.Date" />
        </div>

        <div class="form-group">
            <label for="note">Note</label>
            <textarea id="note" name="note" @bind="transaction.Note" placeholder="Enter Note"></textarea>
        </div>

        @if (transaction.TransactionType == TransactionType.Debt)
        {
            <div class="form-group">
                <label for="dueDate">Due Date</label>
                <input type="date" id="dueDate" name="dueDate" @bind="transaction.DueDate" />
            </div>

            <div class="form-group">
                <label for="source">Source</label>
                <input type="text" id="source" name="source" @bind="transaction.Source" placeholder="Enter Source" />
            </div>

        }


        <div class="form-group">
            <button type="submit" class="btn-save">Save</button>
        </div>
    </form>
</div>
@code {



    private Transaction transaction = new Transaction();
    private List<Transaction> Transactions { get; set; } = new List<Transaction>();
    private decimal totalCredit => TransactionOperations.GetTotal(Transactions, TransactionType.Credit);
    private decimal totalDebit => TransactionOperations.GetTotal(Transactions, TransactionType.Debit);
    private decimal totalDebts => TransactionOperations.GetTotal(Transactions, TransactionType.Debt);
    private decimal remainingDebt => TransactionOperations.GetRemainingDebt(Transactions);
    private decimal totalBalance => TransactionOperations.GetTotalBalance(Transactions);  // Calculate total balance

    protected override async Task OnInitializedAsync()
    {
        Transactions = await TransactionOperations.LoadTransactionsAsync();
    }

    private async Task HandleSubmit()
    {
        try
        {
            
            if (transaction.TransactionType == TransactionType.Debit && totalBalance < transaction.Amount)
            {
               
                Console.WriteLine("Error: Total balance is less than the debit amount!");
               
                await JS.InvokeVoidAsync("alert", "Insufficient balance for this debit transaction.");
                return;
            }
            
            if (transaction.TransactionType == TransactionType.Debt)
            {
                transaction.RemainingAmount = transaction.Amount; // Set RemainingAmount as the Amount
                transaction.IsClear = false; // Debt is initially not cleared
            }



            // Add the transaction to the list
            Transactions.Add(transaction);

            await TransactionOperations.SaveTransactionsAsync(Transactions);
            // Reset the form after saving
            transaction = new Transaction();
        }
        catch (Exception ex)
        {
           
            Console.WriteLine($"Error saving transaction: {ex.Message}");
        }
    }
}


